---
import '../../global.css'
import { getGame, getSession, firestore, getUser } from '../../lib/account'
import Editor from '../../components/big-interactive-pages/editor'
import StandardHead from '../../components/standard-head.astro'
import { signal } from '@preact/signals'
import type { PersistenceState } from '../../lib/state'
import { Timestamp } from 'firebase-admin/firestore'

const session = await getSession(Astro.cookies)
const draftGame = await getGame(Astro.cookies.get('sprigDraft').value)

let _persistenceState: PersistenceState
if (session) {
	if (draftGame && draftGame.ownerId === session.user.id) {
		// A game is stored as a draft and I own it
		if (draftGame.isDraft) {
			await firestore.collection('games').doc(draftGame.id).update({
				isDraft: false,
				lastModified: Timestamp.now()
			})
		}
		Astro.cookies.delete('sprigDraft')
		return Astro.redirect(`/~/${draftGame.id}`, 302)
	} else if (draftGame) {
		if (draftGame.isDraft) {
			// There's a *draft* game but I'm not the owner??? I guess... copy it to my account?
			const _newGame = await firestore.collection('games').add({
				ownerId: session.user.id,
				isDraft: false,
				lastModified: new Date,
				name: draftGame.name,
				code: draftGame.code
			})
			Astro.cookies.delete('sprigDraft')
			return Astro.redirect(`/~/${_newGame.id}`, 302)
		} else {
			// There's somehow a non-draft game stored that I don't own, so just redirect to login
			return Astro.redirect('/login', 302)
		}
	} else {
		// No game is stored
		return Astro.redirect('/~', 302)
	}
} else {
	if (draftGame && draftGame.isDraft) {
		const user = await getUser(draftGame.ownerId)
		_persistenceState = {
			kind: 'PERSISTED',
			showLoginPrompt: true,
			saveEmail: user?.email ?? null,
			game: draftGame,
			cloudSaveState: 'SAVED'
		}
	} else if (draftGame) {
		// Oh boy, there's a game but it's not a draft anymore
		// (They probably made their account on a different computer)
		Astro.cookies.delete('sprigDraft')
		return Astro.redirect('/login', 302)
	} else {
		// Brand new Sprigster!
		_persistenceState = {
			kind: 'IN_MEMORY_DRAFT',
			showInitialWarning: true
		}
	}
}

const persistenceState = signal(_persistenceState)
---

<html lang='en'>
	<head>
		<StandardHead />
		<title>Editor | Sprig</title>
	</head>
	<body>
		<Editor
			client:load
			loggedIn={false}
			persistenceState={persistenceState}
			cookies={{ outputAreaSize: Astro.cookies.get('outputAreaSize').number() }}
		/>
	</body>
</html>